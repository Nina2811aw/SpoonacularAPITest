Index: src/view/RecipeSearchView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\nimport interface_adapter.choose_recipe.ChooseRecipeState;\nimport interface_adapter.food_joke.FoodJokeController;\nimport interface_adapter.food_joke.FoodJokeState;\nimport interface_adapter.food_joke.FoodJokeViewModel;\nimport interface_adapter.recipe_search.RecipeSearchController;\nimport interface_adapter.recipe_search.RecipeSearchState;\nimport interface_adapter.recipe_search.RecipeSearchViewModel;\nimport interface_adapter.show_favourites.ShowFavouritesController;\nimport use_case.recipe_search.Cuisine;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n\n\npublic class RecipeSearchView extends JPanel implements ActionListener, PropertyChangeListener{\n\n    public final String viewName = \"Recipe Search View\";\n\n    private JTextField ingredientsInputField = new JTextField(30);\n\n    private final JButton search;\n    private final JButton favourites;\n\n    private final JButton joke;\n\n    // checkboxes for diets\n    private final JCheckBox vegan;\n    private final JCheckBox vegetarian;\n    private final JCheckBox keto;\n    private final JCheckBox glutenFree;\n    private final JCheckBox paleo;\n\n    // checkboxes for allergies\n    private final JCheckBox peanuts;\n    private final JCheckBox dairy;\n    private final JCheckBox soy;\n\n    // drop down for cuisines\n    private final JComboBox<String> cuisines;\n    //private final JComboBox<Cuisine> cuisines;\n\n    // drop down for protein\n    private final JComboBox<String> protein;\n    // drop down for fat\n    private final JComboBox<String> fat;\n\n    private final JComboBox<String> carbs;\n\n    private final JComboBox<String> calories;\n\n    public final RecipeSearchViewModel recipeSearchViewModel;\n\n    public final RecipeSearchController recipeSearchController;\n\n    private final FoodJokeViewModel foodJokeViewModel;\n    public final FoodJokeController foodJokeController;\n\n    private final ShowFavouritesController showFavouritesController;\n\n    public RecipeSearchView(RecipeSearchController controller, RecipeSearchViewModel recipeSearchViewModel, FoodJokeController foodJokeController, FoodJokeViewModel foodJokeViewModel, ShowFavouritesController showFavouritesController){\n\n        this.recipeSearchController = controller;\n        this.recipeSearchViewModel = recipeSearchViewModel;\n        this.showFavouritesController = showFavouritesController;\n        recipeSearchViewModel.addPropertyChangeListener(this);\n\n        this.foodJokeController = foodJokeController;\n        this.foodJokeViewModel = foodJokeViewModel;\n        foodJokeViewModel.addPropertyChangeListener(this);\n\n        JLabel title = new JLabel(RecipeSearchViewModel.TITLE_LABEL);\n        title.setAlignmentX(Component.CENTER_ALIGNMENT);\n\n        JPanel ingredients_managed = new JPanel();\n        JButton clear_recipe = new JButton(\"Clear Ingredients Stored\");\n        JButton ingredientsSearchedFor = new JButton(\"Ingredients Stored\");\n        ingredients_managed.add(ingredientsSearchedFor);\n        ingredients_managed.add(clear_recipe);\n        ingredients_managed.setAlignmentX(Component.CENTER_ALIGNMENT);\n\n        LabelTextPanel ingredientsInfo = new LabelTextPanel(new JLabel(RecipeSearchViewModel.INGREDIENTS_LABEL), ingredientsInputField);\n\n        JPanel buttons = new JPanel();\n        search = new JButton(RecipeSearchViewModel.SEARCH_BUTTON);\n        favourites = new JButton(RecipeSearchViewModel.FAVOURITES);\n        buttons.add(favourites);\n        buttons.add(search);\n\n        JPanel checkboxesDiet = new JPanel();\n        checkboxesDiet.add(new JLabel(\"Diets:\"));\n        glutenFree = new JCheckBox(\"gluten-free\");\n        vegetarian = new JCheckBox(\"vegetarian\");\n        vegan = new JCheckBox(\"vegan\");\n        keto = new JCheckBox(\"keto\");\n        paleo = new JCheckBox(\"paleo\");\n        checkboxesDiet.add(glutenFree);\n        checkboxesDiet.add(vegetarian);\n        checkboxesDiet.add(vegan);\n        checkboxesDiet.add(keto);\n        checkboxesDiet.add(paleo);\n\n        JPanel checkboxesAllergies = new JPanel();\n        checkboxesAllergies.add(new JLabel(\"Intolerances:\"));\n        peanuts = new JCheckBox(\"peanuts\");\n        soy = new JCheckBox(\"soy\");\n        dairy = new JCheckBox(\"dairy\");\n        checkboxesAllergies.add(peanuts);\n        checkboxesAllergies.add(soy);\n        checkboxesAllergies.add(dairy);\n\n        JPanel dropDownCuisines = new JPanel();\n        dropDownCuisines.add(new JLabel(\"Cuisine:\"));\n        String[] cuisineStrings = {\"no restriction\", \"Chinese\", \"Italien\", \"Indian\", \"Mexican\", \"African\", \"German\"};\n        //Cuisine[] cuisineStrings = {Cuisine.NORESTRICTION, Cuisine.ITALIEN};\n        cuisines = new JComboBox<>(cuisineStrings);\n        dropDownCuisines.add(cuisines);\n\n        JPanel dropDownMacros = new JPanel();\n        dropDownMacros.add(new JLabel(\"Macro nutrients:\"));\n        String[] proteinStrings = {\"no protein restriction\", \"low protein\", \"high protein\"}; // if these names are changed, the controller has to be adapted\n        protein = new JComboBox<>(proteinStrings);\n\n        String[] fatStrings = {\"no fat restriction\", \"low fat\", \"high fat\"};\n        fat = new JComboBox<>(fatStrings);\n\n        String[] carbsStrings = {\"no carbs restriction\", \"low carbs\", \"high carbs\"};\n        carbs = new JComboBox<>(carbsStrings);\n\n        String[] caloriesStrings = {\"no calorie restrictions\", \"low calorie\", \"high calorie\"};\n        calories = new JComboBox<>(caloriesStrings);\n\n        dropDownMacros.add(protein);\n        dropDownMacros.add(fat);\n        dropDownMacros.add(carbs);\n        dropDownMacros.add(calories);\n\n        JPanel foodJoke = new JPanel();\n        joke = new JButton(\"show me fun food trivia\");\n        foodJoke.add(joke);\n\n        ingredientsInputField.setToolTipText(\"Type In Your Ingredients\");\n\n        this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n\n        this.add(title);\n        this.add(ingredientsInfo);\n        this.add(ingredients_managed);\n        this.add(checkboxesDiet);\n        this.add(checkboxesAllergies);\n        this.add(dropDownCuisines);\n        this.add(dropDownMacros);\n        this.add(buttons);\n        this.add(foodJoke);\n\n        // action listener when search button gets pressed\n        search.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent evt) {\n                        if(evt.getSource().equals(search)){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n\n                            System.out.println(\"search button pressed\");\n                            // arguments have to be adapted based on attributed of RecipeSearchState\n                            recipeSearchController.execute(currentState.getIngredients(), currentState.getDiets(), currentState.getIntolerances(), currentState.getCuisine(), currentState.getProtein(), currentState.getFat(), currentState.getCarbs(), currentState.getCalories());\n                            //changed the type of getIngredients()\n                        }\n                    }\n                }\n        );\n\n        favourites.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent evt) {\n                        if(evt.getSource().equals(favourites)){\n                            System.out.println(\"favourites button pressed\");\n                            showFavouritesController.execute(); // no user input required\n                        }\n                    }\n                }\n        );\n\n        // user types in ingredients\n\n        clear_recipe.addActionListener(                // This creates an anonymous subclass of ActionListener and instantiates it.\n                new ActionListener() {\n                    public void actionPerformed(ActionEvent evt) {\n                        RecipeSearchState state = new RecipeSearchState();\n                        recipeSearchViewModel.setState(state);\n                        JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0),\"Cleared\");\n\n                    }\n                }\n        );\n\n        ingredientsSearchedFor.addActionListener(                // This creates an anonymous subclass of ActionListener and instantiates it.\n                new ActionListener() {\n                    public void actionPerformed(ActionEvent evt) {\n                        RecipeSearchState state = recipeSearchViewModel.getState();\n                        if (!state.getIngredients().isEmpty()){\n                        JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0), state.getIngredients().substring(0,state.getIngredients().length() - 1));\n                    }\n                        else{\n                            JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0),\"No Recipes Stored\");\n                        }\n                    }\n                }\n        );\n\n        ingredientsInputField.addActionListener(                // This creates an anonymous subclass of ActionListener and instantiates it.\n                new ActionListener() {\n                    public void actionPerformed(ActionEvent evt) {\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        String text = ingredientsInputField.getText();\n                        currentState.addIngredients(text);//need to change set ingredients to add ingredients\n                        ingredientsInputField.setText(\"\");\n                        recipeSearchViewModel.setState(currentState);\n                        System.out.println(recipeSearchViewModel.getState().getIngredients()); // get rid\n                    }\n                }\n        );\n        // will get an error if you don't add an ingrediet\n\n        glutenFree.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(glutenFree.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setGlutenFree(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setGlutenFree(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        vegetarian.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(vegetarian.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setVegetarian(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setVegetarian(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n\n        );\n\n        vegan.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(vegan.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setVegan(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setVegan(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        paleo.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(paleo.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setPaleo(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setPaleo(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        keto.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(keto.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setKeto(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setKeto(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        peanuts.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(peanuts.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setPeanutIntolerance(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setPeanutIntolerance(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        dairy.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(dairy.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setDairyIntolerance(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setDairyIntolerance(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        soy.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        if(soy.isSelected()){\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setSoyIntolerance(true);\n                            recipeSearchViewModel.setState(currentState);\n                        } else{\n                            RecipeSearchState currentState = recipeSearchViewModel.getState();\n                            currentState.setSoyIntolerance(false);\n                            recipeSearchViewModel.setState(currentState);\n                        }\n                    }\n                }\n        );\n\n        cuisines.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        String selectedCuisine = cuisines.getSelectedItem().toString();\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        currentState.setCuisine(selectedCuisine);\n                        recipeSearchViewModel.setState(currentState);\n                    }\n                }\n        );\n\n        protein.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        String selectedProtein = protein.getSelectedItem().toString();\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        currentState.setProtein(selectedProtein);\n                        recipeSearchViewModel.setState(currentState);\n                    }\n                }\n        );\n\n        fat.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        String selectedFat = fat.getSelectedItem().toString();\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        currentState.setFat(selectedFat);\n                        recipeSearchViewModel.setState(currentState);\n                    }\n                }\n        );\n\n        carbs.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        String selectedCarb = carbs.getSelectedItem().toString();\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        currentState.setCarbs(selectedCarb);\n                        recipeSearchViewModel.setState(currentState);\n                    }\n                }\n        );\n\n        calories.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent e) {\n                        String selectedCalories = calories.getSelectedItem().toString();\n                        RecipeSearchState currentState = recipeSearchViewModel.getState();\n                        currentState.setCalories(selectedCalories);\n                        recipeSearchViewModel.setState(currentState);\n                    }\n                }\n        );\n\n        joke.addActionListener(\n                new ActionListener() {\n                    @Override\n                    public void actionPerformed(ActionEvent evt) {\n                        if(evt.getSource().equals(joke)){\n                            foodJokeController.execute();\n                        }\n\n                    }\n                }\n        );\n\n\n\n    }\n    @Override\n    public void actionPerformed(ActionEvent e) {\n    }\n\n    @Override\n    public void propertyChange(PropertyChangeEvent evt) {\n        System.out.println(\"property change food joke\");\n        FoodJokeState state = (FoodJokeState) evt.getNewValue();\n        JOptionPane.showMessageDialog(this, state.getFoodJoke());\n\n    }\n\n    // should include a textbox for ingredients\n    // should include checkboxes for:\n    /*\n     * use_case.recipe_search.Diet:\n     * Keto\n     * Vegetarian\n     * Gluten-Free\n     * Vegan\n     * Paleo\n     *\n     * Allergies\n     * Peanuts\n     * Dairy\n     * Soy\n     *\n     * use_case.recipe_search.Cuisine\n     * African\n     * Chinese\n     * German\n     * Mexican\n     * Indian\n     * Italian\n     *\n     * Macronutrients\n     *\n     * High Protein\n     * Low Fat\n     * Low Carbs\n     * High Carbs\n     * Low Calorie\n     * High Calorie\n     */\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/RecipeSearchView.java b/src/view/RecipeSearchView.java
--- a/src/view/RecipeSearchView.java	(revision be9ca94790bf7610c2fd9fb6cf426102e1cf7b4e)
+++ b/src/view/RecipeSearchView.java	(date 1701103965783)
@@ -209,7 +209,7 @@
                         JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0), state.getIngredients().substring(0,state.getIngredients().length() - 1));
                     }
                         else{
-                            JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0),"No Recipes Stored");
+                            JOptionPane.showMessageDialog(RecipeSearchView.super.getComponent(0),"No Ingredients Stored");
                         }
                     }
                 }
